{% import 'state_chart.jinja' as sc with context %}
{% extends 'base.jinja' %}

{% macro state_function_name(state, suffix)%}
{{ function(*(state.path_elements + [suffix])) }}
{%- endmacro %}

{% macro init_name(state)%}
{{ state_function_name(state, 'init') }}
{%- endmacro %}

{% macro exit_name(state)%}
{{ state_function_name(state, 'exit') }}
{%- endmacro %}

{% macro event_handler_name(state)%}
{{ state_function_name(state, 'handle_event') }}
{%- endmacro %}

{% macro init_sig(state) %}
{{ sc.function_signature('static void', init_name(state), [sc.state_chart_param]) }}
{%- endmacro %}

{% macro exit_sig(state) %}
{{ sc.function_signature('static void', exit_name(state), [sc.state_chart_param]) }}
{%- endmacro %}

{% macro event_handler_sig(state) %}
{{ sc.function_signature('static void', event_handler_name(state), sc.event_handler_params) }}
{%- endmacro %}

{% block description %}
 * {{state_chart.name}} statechart implementation.
{% endblock %}

{% block body %}
#include "{{ file_prefix }}.h"

{% for state in state_chart.all_states %}
{{ init_sig(state) }};
{{ exit_sig(state) }};
{{ event_handler_sig(state) }};
{% endfor %}

{% for state in state_chart.all_states %}
{{ init_sig(state) }}
{
    {% if state.init_actions %}
    {{ state.init_actions | join(';\n    ') }};
    {% else %}
    (void){{ variable('sc') }};
    {% endif %}
}

{{ exit_sig(state) }}
{
    {% if state.exit_actions %}
    {{ state.exit_actions | join(';\n    ') }};
    {% else %}
    (void){{ variable('sc') }};
    {% endif %}
}

{{ event_handler_sig(state) }}
{
    switch ({{ variable('evt') }})
    {
    {% for transition in state.transitions %}
    {#case {{ sc.make_event_name(transition.event_handler.event) }}:
        current_state = {{ transition.target | constant }};
        break;#}
    {% endfor %}
    }
}

{% endfor -%}

{{ sc.init_sig }}
{
}

{{ sc.event_handler_sig }}
{
    {#switch ({{pointer('sc')}}->{{sc.state_field_name()}})#}
    {
    {% for state in state_chart.states %}
    case {{ sc.state_enum_name(state) }}:
        {{ event_handler_name(state) }}(event);
        break;
    {% endfor %}
    }
}

{% endblock %}