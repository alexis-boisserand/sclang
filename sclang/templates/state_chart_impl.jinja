{% import 'state_chart.jinja' as sm with context %}
{% extends 'base.jinja' %}

{% set state_type = style.type(sm.ns, 'state') %}

{% macro make_event_handler_name(state) %}
{{ style.function(sm.ns, state.name, 'handle', 'event') }}
{%- endmacro %}

{% macro make_event_handler_sig(state) %}
static void {{make_event_handler_name(state)}}({{sm.event_type}} event)
{%- endmacro %}

{% block description %}
 * {{state_chart_name}} statechart implementation.
{% endblock %}

{% block body %}
#include "{{ file_prefix }}.h"

typedef enum
{
    {{ state_chart.states | map(attribute='name') | map('constant') | join(',\n    ') }}
} {{ state_type }};

static {{state_type}} current_state;

{% for state in state_chart.states %}
{{ make_event_handler_sig(state) }};
{% endfor %}

{% for state in state_chart.states %}
{{ make_event_handler_sig(state) }}
{
    switch (event)
    {
    {% for transition in state.transitions %}
    case {{ sm.make_event_name(transition.event) }}:
        current_state = {{ transition.target | constant }};
        break;
    {% endfor %}
    }
}

{% endfor -%}

{{ sm.init_sig }}
{
    current_state = {{ state_chart.states[0].name | constant }};
}

{{ sm.handle_event_sig }}
{
    switch (current_state)
    {
    {% for state in state_chart.states %}
    case {{ state.name | constant }}:
        {{ make_event_handler_name(state) }}(event);
        break;
    {% endfor %}
    }
}

{% endblock %}