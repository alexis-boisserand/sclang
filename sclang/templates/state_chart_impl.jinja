{% import 'state_chart.jinja' as sm with context %}
{% extends 'base.jinja' %}

{% set state_type = sm.ns + '_state_t' %}

{% macro make_event_handler_name(state) %}
{{sm.ns}}_{{state.name | lower_case}}_handle_event
{%- endmacro %}

{% macro make_event_handler_sig(state) %}
static void {{make_event_handler_name(state)}}({{sm.event_type}} event)
{%- endmacro %}

{% block description %}
 * {{state_chart.name}} statechart implementation.
{% endblock %}

{% block body %}
#include "{{ file_prefix }}.h"

typedef enum
{
    {{ state_chart.states | map(attribute='name') | map('upper_case') | join(',\n    ') }}
} {{ state_type }};

static {{state_type}} current_state;

{% for state in state_chart.states %}
{{ make_event_handler_sig(state) }};
{% endfor %}

{% for state in state_chart.states %}
{{ make_event_handler_sig(state) }}
{
    switch (event)
    {
    {% for transition in state.transitions %}
    case {{ sm.make_event_name(transition.event) }}:
        current_state = {{transition.target | upper_case}};
        break;
    {% endfor %}
    }
}

{% endfor -%}

{{ sm.init_sig }}
{
    current_state = {{ state_chart.states[0].name | upper_case}};
}

{{ sm.handle_event_sig }}
{
    switch (current_state)
    {
    {% for state in state_chart.states %}
    case {{ state.name | upper_case }}:
        {{ make_event_handler_name(state) }}(event);
        break;
    {% endfor %}
    }
}

#ifdef UNIT_TEST

{%- set state_desc_type = sm.ns + '_state_desc_t' %}

#include <assert.h>
#include <stdbool.h>
#include <stddef.h>

typedef struct
{
    {{ state_type }} state;
    const char* name;
} {{ state_desc_type }};

static {{ state_desc_type }} states_descriptions[] = 
{
{% for state in state_chart.states %}
    { {{- state.name | upper}}, "{{ state.name }}"}{% if not loop.last %},{% endif %}{{- '\n' -}}
{% endfor %}
};

const char* {{sm.ns}}_get_current_state(void)
{
    for (size_t i = 0; i < sizeof(states_descriptions) / sizeof({{ state_desc_type}}); i++)
    {
        if (states_descriptions[i].state == current_state)
        {
            return states_descriptions[i].name;
        }
    }

    assert(false);
    return "";
}

#endif // UNIT_TEST

{% endblock %}