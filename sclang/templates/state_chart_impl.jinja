{% import 'state_chart.jinja' as sc with context %}
{% extends 'base.jinja' %}

{% set recurse_variable = variable('recurse') %}
{% set recurse_param = ('bool', recurse_variable) %}

{% macro state_function_name(state, suffix)%}
{{ function(*(state.path_elements + [suffix])) }}
{%- endmacro %}

{% macro init_name(state)%}
{% set suffix = '' if state.parent else '_' %}
{{ state_function_name(state, 'init') + suffix }}
{%- endmacro %}

{% macro exit_name(state)%}
{{ state_function_name(state, 'exit') }}
{%- endmacro %}

{% macro event_handler_name(state)%}
{{ state_function_name(state, 'handle_event') }}
{%- endmacro %}

{% macro init_sig(state) %}
{% set params = [sc.state_chart_param] if state.is_atomic else [sc.state_chart_param, recurse_param] %}
{{ sc.function_signature('static void', init_name(state), params) -}}
{%- endmacro %}

{% macro exit_sig(state) %}
{{ sc.function_signature('static void', exit_name(state), [sc.state_chart_param]) }}
{%- endmacro %}

{% macro call_init(state, recurse) %}
{% if state.is_atomic %}
{{ init_name(state) }}({{ sc.state_chart_pointer }});
{% else %}
{{ init_name(state) }}({{ sc.state_chart_pointer }}, {{ recurse }});
{% endif %}
{%- endmacro %}

{% macro event_handler_sig(state) %}
{% set type = 'void' if not state.parent else 'static void' %}
{{ sc.function_signature(type, event_handler_name(state), sc.event_handler_params) }}
{%- endmacro %}

{% macro actions(actions) %}
{{ actions | join(';\n') }};
{%- endmacro %}

{% macro transition(state, transition) %}
{% if transition.is_internal %}
{{ actions(transition.actions) }}
{% else %}
{% set common_ancestor = state.common_ancestor(transition.target) %}
{% for exit_state in [state] + state.states_to_ancestor(common_ancestor) %}
{% if exit_state.exit_actions %}
{{ exit_name(exit_state) }}({{ sc.state_chart_pointer }});
{% endif %}
{% endfor %}
{% if transition.actions %}
{{ actions(transition.actions) }}
{% endif %}
{% for init_state in ([transition.target] + transition.target.states_to_ancestor(common_ancestor)) | reverse %}
{{ call_init(init_state, 'true'if loop.last else 'false') -}}
{% endfor %}
{% endif %}
{%- endmacro %}

{% macro guarded_event_handler(state, event_handler) %}
{% for transition_ in event_handler.transitions %}
{% if loop.first %}
if ({{ transition_.guard }})
{% elif loop.last and transition_.is_else_guard %}
else
{% else %}
else if ({{ transition_.guard }})
{% endif %}
{
    {{ transition(state, transition_) | indent -}}
}
{% endfor %}
{%- endmacro %}

{% block description %}
 * {{root_state.name}} statechart implementation.
{% endblock %}

{% block body %}
#include "{{ filename(root_state.name) }}.h"
#include <stdbool.h>

{% for state in root_state.all_states %}
{{ init_sig(state) }};
{% if not state.is_transient %}
{% if state.exit_actions %}
{{ exit_sig(state) }};
{% endif %}
{{ event_handler_sig(state) }};
{% endif %}
{% endfor %}

{% for state in root_state.all_states %}
{{ init_sig(state) }}
{
    {% if state.is_transient %}
    {{ guarded_event_handler(state, state.event_handlers[0]) | indent -}}
    {% elif state.parent %}
    {{ sc.state_chart_pointer }}->{{ sc.state_field_name(state.parent) }} = {{ sc.state_enum_name(state) }};
    {% if state.init_actions %}
    {{ actions(state.init_actions) | indent }}
    {% endif %}
    {% endif %}
    {% if not state.is_atomic %}
    if ({{ recurse_variable }})
    {
        {{ call_init(state.initial, recurse_variable) }}    }
    {% endif %}
}
{% if not state.is_transient %}
{% if state.exit_actions %}

{{ exit_sig(state) }}
{
    {{ actions(state.exit_actions) }}
}
{% endif %}

{{ event_handler_sig(state) }}
{
    {% if not state.is_atomic %}
    switch ({{sc.state_chart_pointer }}->{{sc.state_field_name(state)}})
    {
    {% for substate in state.states %}
    {% if not substate.is_transient and substate.event_handlers %}
    case {{ sc.state_enum_name(substate) }}:
        {{ event_handler_name(substate) }}({{ sc.state_chart_pointer }}, {{ sc.event_variable }});
        break;
    {% endif %}
    {% endfor %}
    }
    {% if state.parent %}

    if ({{sc.state_chart_pointer }}->{{sc.state_field_name(state.parent)}} != {{ sc.state_enum_name(state) }})
    {
        return;
    }
    {% endif %}

    {% endif %}
    switch ({{ sc.event_variable }})
    {
    {% for event_handler in state.event_handlers %}
    case {{ sc.event_enum_name(event_handler.event) }}:
        {% if event_handler.is_unguarded %}
        {{ transition(state, event_handler.transitions[0]) | indent(width=8) -}}
        {% else %}
        {{ guarded_event_handler(state, event_handler) | indent(width=8) -}}
        {% endif %}
        break;
    {% endfor %}
    }
}
{% endif %}

{% endfor -%}

{{ sc.state_chart_init_sig }}
{
    {{ call_init(root_state, 'true') -}}
}

{% endblock %}
