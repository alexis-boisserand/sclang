{% import 'state_chart.jinja' as sc with context %}
{% extends 'base.jinja' %}

{% macro state_function_name(state, suffix)%}
{{ function(*(state.path_elements + [suffix])) }}
{%- endmacro %}

{% macro init_name(state)%}
{{ state_function_name(state, 'init') }}
{%- endmacro %}

{% macro exit_name(state)%}
{{ state_function_name(state, 'exit') }}
{%- endmacro %}

{% macro event_handler_name(state)%}
{{ state_function_name(state, 'handle_event') }}
{%- endmacro %}

{% macro init_sig(state) %}
{{ sc.function_signature('static void', init_name(state), [sc.state_chart_param]) }}
{%- endmacro %}

{% macro exit_sig(state) %}
{{ sc.function_signature('static void', exit_name(state), [sc.state_chart_param]) }}
{%- endmacro %}

{% macro event_handler_sig(state) %}
{{ sc.function_signature('static void', event_handler_name(state), sc.event_handler_params) }}
{%- endmacro %}

{% macro actions(actions) %}
{% if actions %}
{{ actions | join(';\n') }};
{% endif %}
{%- endmacro %}

{% macro transition(state, transition) %}
{% if transition.is_internal %}
{{ actions(transition.actions) -}}
{% else %}
{{ exit_name(state) }}({{ sc.state_chart_pointer }});
{{ actions(transition.actions) -}}
{{ init_name(transition.target) }}({{ sc.state_chart_pointer }});
{% endif %}
{%- endmacro %}

{% block description %}
 * {{root_state.name}} statechart implementation.
{% endblock %}

{% block body %}
#include "{{ filename(root_state.name) }}.h"

{% for state in root_state.all_states[1:] %}
{{ init_sig(state) }};
{{ exit_sig(state) }};
{{ event_handler_sig(state) }};
{% endfor %}

{% for state in root_state.all_states[1:] %}
{{ init_sig(state) }}
{
    {{ sc.state_chart_pointer }}->{{ sc.state_field_name(state.parent) }} = {{ sc.state_enum_name(state) }};
    {% if state.init_actions %}
    {{ state.init_actions | join(';\n    ') }};
    {% endif %}
}

{{ exit_sig(state) }}
{
    {% if state.exit_actions %}
    {{ state.exit_actions | join(';\n    ') }};
    {% else %}
    (void){{ sc.state_chart_pointer }};
    {% endif %}
}

{{ event_handler_sig(state) }}
{
    switch ({{ sc.event_variable }})
    {
    {% for event_handler in state.event_handlers %}
    case {{ sc.event_enum_name(event_handler.event) }}:
        {% if event_handler.is_unguarded %}
        {{ transition(state, event_handler.transitions[0]) | indent(width=8) }}
        {% else %}
        {% for transition_ in event_handler.transitions %}
        {% if loop.first %}
        if ({{ transition_.guard }})
        {% elif loop.last and transition_.is_else_guard %}
        else
        {% else %}
        else if ({{ transition_.guard }})
        {% endif %}
        {
            {{ transition(state, transition_) | indent(width=12) }}
        }
        {% endfor %}
        {% endif %}
        break;
    {% endfor %}
    }
}

{% endfor -%}

{{ sc.state_chart_init_sig }}
{
    {{ init_name(root_state.initial) }}({{ sc.state_chart_pointer }});
}

{{ sc.state_chart_event_handler_sig }}
{
    switch ({{sc.state_chart_pointer }}->{{sc.state_field_name(root_state)}})
    {
    {% for state in root_state.states %}
    case {{ sc.state_enum_name(state) }}:
        {{ event_handler_name(state) }}({{ sc.state_chart_pointer }}, {{ sc.event_variable }});
        break;
    {% endfor %}
    }
}

{% endblock %}