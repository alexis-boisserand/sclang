%import common.WS_INLINE
%import common.ESCAPED_STRING -> STRING
%declare _INDENT _DEDENT
%ignore WS_INLINE
%ignore COMMENT

start: _NEWLINE? "/" state_name _NEWLINE attributes
attributes: init? exit? event_handler* state*

init: "#init" _NEWLINE actions
exit: "#exit" _NEWLINE actions
event_handler: unguarded_event_handler
             | guarded_event_handler
state: regular_state
     | transient_state

actions: _INDENT (action _NEWLINE)+ _DEDENT

unguarded_event_handler: event target
guarded_event_handler: event _NEWLINE _INDENT guarded_transition+ else_transition? _DEDENT

regular_state: state_name _NEWLINE [_INDENT attributes _DEDENT]
transient_state: "<>" state_name _NEWLINE _INDENT transient_guarded_transition+ transient_else_transition _DEDENT

event: "@" event_name
target: external_target 
      | internal_target
external_target: "->" state_path _NEWLINE [actions]
internal_target: "--" _NEWLINE actions

guarded_transition: "[" guard "]" target
else_transition: "[" "else" "]" target
transient_guarded_transition: "[" guard "]" external_target
transient_else_transition: "[" "else" "]" external_target

state_name: NAME
event_name: NAME
action: STRING
guard: STRING
state_path: STATE_PATH

COMMENT: _NEWLINE? /\/\/.*/
STATE_PATH: ("../")* (NAME"/")* NAME
NAME: LOWER_CASE
    | CAMEL_CASE
    | UPPER_CASE
    | LOWER_CAMEL_CASE
LOWER_CASE: /([a-z]+_?)*[a-z]/
UPPER_CASE: /([A-Z]+_?)*[A-Z]/
CAMEL_CASE: /([A-Z][a-z]+)+/
LOWER_CAMEL_CASE: /([a-z]+[A-Z][a-z]+)+/
_NEWLINE: /(\r?\n[\t ]*)+/